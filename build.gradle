/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'arno.diederik' at '7-10-16 11:04' with Gradle 2.4
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.4/userguide/tutorial_java_projects.html
 * 
 * // All our projects have the same group id, this is used when publishing the archives
 *  // NOTE: projects are listed in settings.gradle
 * allprojects { group = 'nl.technolution' }
 * ext.nonJavaProjects = [ project(":wvp-spa-client") ]
 *
 *
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Define all library dependencies in one file for clarity
apply from:'dependencies.gradle'


// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
	mavenCentral()
    jcenter()
}

// In this section you declare the dependencies for your production and test code
//dependencies {
    // The production code uses the SLF4J logging API at compile time
 //   compile 'org.slf4j:slf4j-api:1.7.12'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
   // testCompile 'junit:junit:4.12'
//}

// Example configuration used for all java projects
configure(javaProjects()) {
    // The techno-style project should always use the newest java version
    sourceCompatibility = 1.8

    // Standard libraries added to all projects
    dependencies {
        testCompile libraries.test_junit
    }
    test {
        // Example adjust memory limits:
        //minHeapSize = "64m"
        //maxHeapSize = "512m"
    }
}
